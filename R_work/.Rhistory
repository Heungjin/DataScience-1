setwd("/Users/yoon/Documents/DataScience/R_work")
library(KoNLP)
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
library(KoNLP)
library(wordcloud)
library(stringi)
library(stringr)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
txt = readLines('big.txt', encoding = "UTF-8")
buildDictionary(user_dic = data.frame(c("빅데이터", "ncn")), replace_usr_dic = F)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
txt0 = str_to_lower(txt)
# word unite
txt1 = gsub("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt1 = gsub("big data", "빅데이터", txt1)
txt1 = gsub("[[:graph:]]", "", txt1)
txt1 = gsub("[[A-z]]", "", txt1)
txt1 = gsub("[[:punct:]]", "", txt1)
# txt1 = gsub("[a(\\d)+]", "", txt1) -> regular expression
txt1 = gsub("  ", " ", txt1)
txt1
txt0 = str_to_lower(txt)
# word unite
txt1 = gsub("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt1 = gsub("big data", "빅데이터", txt1)
txt1 = gsub("[[:graph:]]", "", txt1)
txt1 = gsub("[[A-z]]", "", txt1)
txt1 = gsub("[[:punct:]]", "", txt1)
# txt1 = gsub("[a(\\d)+]", "", txt1) -> regular expression
txt1 = gsub("  ", " ", txt1)
txt0 = str_to_lower(txt)
# word unite
txt1 = gsub("빅데이타", "빅데이터", txt0)
txt1 = gsub("bigdata", "빅데이터", txt1)
txt1 = gsub("big data", "빅데이터", txt1)
txt1 = gsub("[[:digit:]]", "", txt1)
txt1 = gsub("[[A-z]]", "", txt1)
txt1 = gsub("[[:punct:]]", "", txt1)
# txt1 = gsub("[a(\\d)+]", "", txt1) -> regular expression
txt1 = gsub("  ", " ", txt1)
txt1
txt2 = txt1[str_length(txt1)>1]
txt2 = txt1[str_length(txt1)>1]
txt_e = extractNoun(txt2)
class(txt_e)
wordcloud(txt_e)
txt_t = table(unlist(txt_e))
txt_s = sort(txt_t, decreasing = T)
txt_s
txt_s = sort(txt_t, decreasing = F)
txt_s
txt_s = sort(txt_t, decreasing = T)
txt_s
head(txt_s1)
txt_s1 = txt_s[str_length(names(txt_s)) > 1]
head(txt_s1)
txt_h = head(txt_s1, 5)
barplot(txt_h)
txt_s1
View(txt_s1)
wordcloud(names(txt_s1), txt_s1, scale=c(5, 0.5), min.freq = 2, random.order = F)
wordcloud(names(txt_s1), txt_s1, scale=c(5, 0.5), min.freq = 2, random.order = F, family="AppleGothic")
wordcloud(names(txt_s1),
txt_s1,
scale=c(5, 0.5),
min.freq = 2,
random.order = F,
rot.per = 0.2
family="AppleGothic")
wordcloud(names(txt_s1),
txt_s1,
scale=c(5, 0.5),
min.freq = 2,
random.order = F,
rot.per = 0.2,
family="AppleGothic")
wordcloud(
txt_s1,
scale=c(5, 0.5),
min.freq = 2,
random.order = F,
rot.per = 0.2,
family="AppleGothic")
wordcloud(names(txt_s1),
txt_s1,
scale=c(5, 0.5),
min.freq = 2,
random.order = F,
rot.per = 0.2,
family="AppleGothic")
wordcloud(txt_s1, # data : must be table class
scale=c(5, 0.5), # string size max, min
min.freq = 2, # word freq min
random.order = F, # location random
rot.per = 0.2, # rotation percent
family="AppleGothic")
wordcloud(names(txt_s1),
txt_s1, # data : must be table class
scale=c(5, 0.5), # string size max, min
min.freq = 2, # word freq min
random.order = F, # location random
rot.per = 0.2, # rotation percent
family="AppleGothic")
if (TRUE){
print("hello true")
} else{
print("hello false")
}
x %in% c(1,4,7,5)
x %in% c(1,4,7,5)
x=5
x %in% c(1,4,7,5)
sum = 0
for(i in seq(1, 100, 3)){
sum = sum + i
print(sum)
}
seq(1, 100, 3)
s = array(dim=c(1,50))
s
View(s)
str(s)
dim=c(1,50)
dim
View(dim)
seq(1, 100, 3) # interval sequential number
s = array(dim=c(1,50))
for (i in 1:50){
if(iris[i, 1]> 6.5 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
s = array(c(1,50))
str(s)
s = array(dim=c(1,50))
s1 = ifelse(iris$Sepal.Length > 7, 1, 0)
s1
s = array(dim=c(1,50))
for (i in 1:50){
if(iris[i, 1]> 6.5 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
View(s)
s = array()
s
s = array(c(1,50))
for (i in 1:50){
if(iris[i, 1]> 6.5 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
for (i in 1:50){
if(iris[i, 1]> 6.5 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s = array(c(1,50))
s
s = array(dim=c(1,50))
s
for (i in 1:50){
if(iris[i, 1]> 7 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
ind1 = sample(1:150, 10, replace = T)
ind1
s1 = ifelse(iris$Sepal.Length > 7, 1, 0) # same with above
s1
s = array(dim=c(1,50)) # set dimension of array
s = array(c(1,50)) # example for difference
for (i in 1:50){
if(iris[i, 1]> 7 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
s = array(dim=c(1,120)) # set dimension of array
for (i in 1:50){
if(iris[i, 1]> 7 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
s = array(dim=c(1,120)) # set dimension of array
for (i in 1:50){
if(iris[i, 1]> 7 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
for (i in 1:120){
if(iris[i, 1]> 7 ){
s[1,i] = 1
} else{
s[1,i] = 0
}
}
s
m2 = c()
for (i in 1:100){
ind1 = sample(1:150, 10, replace = T)
m1 = mean(ind1)
m2 = c(m2, m1)
}
hist(m2)
mean(m2)
m2 = c()
for (i in 1:100){
ind1 = sample(1:150, 10, replace = T)
m1 = mean(ind1)
m2 = c(m2, m1)
print(m2)
}
mean(1:150)
function(a, b){
add = a+b
return (add1)
}
add <- function(a, b){
add = a+b
return (add1)
}
add(1,3)
print(add(1,3))
add <- function(a, b){
add1 = a+b
return (add1)
}
print(add(1,3))
add(1,3)
