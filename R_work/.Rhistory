rnorm(100, mean=0, sd=3)
x1 = rnorm(100, mean=0, sd=3)
x1
options(digits = 3)
x1 = rnorm(100, mean=0, sd=3)
x1
hist(x1)
plot(density(x1))
hist(x1)
plot(density(x1))
var(1)
var(x1)
mean(x1)
median(x1)
quantile(x1, c(0.25, 0.5, 0.75))
dpois(3,1)
q1 = quantile(1:10, c(1/4, 3/4))
str(q1)
q1
sample(1:10, 5)
sample(1:10, 5, replace = T, prob = 1:10) # prob는 가중치
ind1 = sample(nrow(iris), nrow(iris), replace = F)
A1 = iris[ind1]
A1 = iris[ind1,]
A1
n1 = nrow(iris)
train = A1[1:(n1*0.7),]
test = A1[-(1:(n1*0.7)),]
n1
ind3 = sample(2, n1, replace = T, prob = c(0.7, 0.3))
sample(2,10)
sample(2,10,replace = F)
ind3 = sample(2, 10, replace = T, prob = c(0.7, 0.3))
ind3 = sample(2, n1, replace = T, prob = c(0.7, 0.3))
ind3
ind3 = sample(3, n1, replace = T, prob = c(0.7, 0.3))
table(ind3)
train2 = iris[ind3 == 1]
train2 = iris[ind3 == 1,]
test2 = iris[ind3 == 2,]
install.packages('sampling')
library(sampling)
x = strata(c("Species"),
size = c(3, 3, 3),
method = "srswor",
data = iris)
x
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
x = strata(c("Species", "Petal.Length"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x = strata(c("Species"),
size = c(3, 3, 1),
method = "srswor", # srswor : replace F // srswr : replace T
data = iris)
x
getdata(iris,x)
rep(c(3,7), c(3,2))
rep(c(3,7), c(3,2))
rep(c(3,7), each=3)
rep(1:15, length.out=15)
rep(1:10, length.out=15)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
rep(1:2, 75)
rep(1:2, 75)
rep(1:2, 75)
strata(c("Species", "Species2"), size=c(1,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(2,1,1,1,1,1), method="srswr", data=iris)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
library(doBy)
sampleBy(~Species+Species2, frac = 0.3, data = A1)
View(A1)
for (i in seq(sample(1:10, 1)))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
seq(sample(1:10, 1))
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
print(i)
#d2 = iris[i, ]
}
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
d <- data.frame(x=c("1","2","2","1"), y=c("A","B","A","B"), num=c(3,5,8,7))
d
table(d$x, d$y)
d$x
d$y
table(d$x, d$y)
d_bind = rbind(d,d)
table(d_bind$x, d_bind$y)
View(d_bind)
xtabs(num ~ x+y, data=d_bind)
View(d_bind)
table(d_bind$x)
table(d_bind$x, d_bind$y)
xtabs(num ~ x+y, data=d)
View(d)
xt = xtabs(num ~ x+y, data=d)
margin.table(xt)
xt = xtabs(num ~ x+y, data=d_bind)
margin.table(xt)
sum(xt)
margin.table(xt)
margin.table(xt, 1)
margin.table(xt, 2)
xt
d1
prop.table(xt, 1)
tot = sum(xt)
p_xt = prop.table(xt)
str(p_xt)
p_xt
m_xt = as.matrix(p_xt)
str(m_xt)
m_xt
m_xt = as.matrix(p_xt)
str(m_xt)
tot*p_xt[[1]][1]
p_xt[[1]][1]
str(p_xt)
p_xt
data("survey")
data(survey)
library(MASS)
data('survey')
View(survey)
xt = xtabs(~Sex+Enter, data = survey)
xt = xtabs(~Sex+Exer, data = survey)
xt
View(survey)
chi1 = chisq.test(xt)
chi1
str(chi1)
chi1$statistic
str(chi1)
fisher.test(xt)
chi1 = chisq.test(xt) # ???
chi1
fisher.test(xt)
fisher.test(xtabs(~W.Hnd+Clap, data = survey))
A1
View(A1)
iris$Species2 = rep(1:2, 75)
strata(c("Species", "Species2"), size=c(5,1,1,1,1,1), method="srswr", data=iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = A1)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
table(iris)
table(iris$Species)
table(iris$Species+Species2)
iris$Species2 = rep(1:2, 75)
table(iris$Species+Species2)
table(iris$Species)
table(iris$Species2)
table(iris$Species)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2+Sepal.Length, # ???
frac = 0.3,
data = iris)
sampleBy(~Species+Species2, # ???
frac = 0.3,
data = iris)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
table(te)
str(te)
te = sampleBy(~Species+Species2, # Spcecies 1, 2 를 묶은것을 하나의 그룹으로 보는 것.
frac = 0.3,
data = iris)
te
d1 = data.frame()
for (i in seq(sample(1:10, 1))){
d2 = iris[i, ]
d1 = rbind(d1, d2)
}
d1
xt = xtabs(~Sex+Exer, data = survey)
View(survey)
View(xt)
xt
chi1 = chisq.test(xt) # ???
chi1
str(chi1)
chi1$statistic
chi1
str(chi1)
var.test(x=data1, y=data2)
data1 = rnorm(100, mean=180, sd=10)
t.test(x=data1, mu=180)
t.test(x=data1, mu=200)
data2 = rnorm(100, mean=160, sd=5)
var.test(x=data1, y=data2)
t.test(x=data1, y=data2, var.equal = F)
chi1
str(chi1)
chi1$statistic
fisher.test(xtabs(~W.Hnd+Clap, data = survey)) # ???
setwd("/Users/yoon/Documents/DataScience/R_work")
data2 = read.csv("data1.csv", encoding = "UTF-8")
data2
yak = read.csv("test.csv", encoding = "UTF-8")
yak = read.csv("test.csv", encoding = "UTF-8")
yak
View(yak)
yak = read.csv("test.csv", encoding = "askii")
View(yak)
table(survey$W.Hnd)
chisq.test(table(survey$W.Hnd), p=c(.3, .7))
shapiro.test(rnorm(!00))
shapiro.test(rnorm(100))
ks.test(rnorm(100), rnorm(100, 5, 3))
rnorm(100, 5, 3)
rnorm(100)
rnorm(100, 5, 3)
ks.test(rnorm(100), rnorm(100, 5, 3))
x <- rnorm(1000, mean = 10, sd=1)
qqnorm(x)
plot(density(x))
qqnorm(x)
library(MASS)
data('survey')
data('survey')
ss1 = survey[,]
View(survey)
ss1 = survey[ ,"Height"]
ss1 = survey[Sex=="Male" ,"Height"]
ss1 = survey[survey$Sex=="Male" ,"Height"]
ss1
View(survey)
f1 = survey[survey$Sex=="Male", ]
m1 = survey[survey$Sex=="Male", ]
f1 = survey[survey$Sex=="Female", ]
mean(m1)
ss1 = survey[, "Height"]
ss1
ss2 = na.omit(ss1)
ss2
ss2
mean(ss1)
mean(ss2)
mean(ss1)
mean(ss2)
t.test(x=ss2, mu=173.5)
t.test(ss2, mu=173.5)
t.test(ss2, mu=178)
t.test(ss2, mu=178)
ss1 = survey[survey$Sex=="Male", "Height"]
t.test(ss1, mu=178)
t.test(ss1, mu=178)
ss2 = na.omit(ss1)
t.test(ss2, mu=178)
ss1 = survey[survey$Sex=="Female", "Height"] %% na.omit()
ss3 = na.omit(survey[survey$Sex=="Female", "Height"])
t.test(ss2, ss3)
t.test(ss2, ss3, var.equal = T)
t.test(ss2, ss3, var.equal = F)
t.test(ss2, ss3, var.equal = T)
t.test(ss2, ss3, var.equal = F)
t.test(ss2, ss3, var.equal = T)
var(ss1)
var(ss2)
t.test(ss2, ss3, var.equal = T, paired = F)
t.test(ss2, ss3, var.equal = F, paired = F)
t.test(ss2, ss3, var.equal = T, paired = F)
t.test(ss2, ss3, var.equal = T, paired = T)
t.test(ss2, ss3, var.equal = T, paired = F)
t.test(ss2, ss3, var.equal = F, paired = F)
var.test(ss2, ss3)
t.test(ss2, ss3, var.equal = F, paired = T)
sleep
View(sleep)
t.test(extra~group, data = sleep)
var.test(extra~group, data = sleep)
View(sleep)
t.test(extra~group, var.equal = T, data = sleep)
t.test(extra~group, var.equal = T, data = sleep, paired = T)
t.test(extra~group, var.equal = T, data = sleep)
t.test(extra~group, var.equal = T, data = sleep, paired = T)
t.test(extra~group, var.equal = T, data = sleep)
t.test(extra~group, var.equal = T, data = sleep, paired = T)
t.test(extra~group, var.equal = T, data = sleep)
t.test(extra~group, var.equal = T, data = sleep, paired = T)
sleep1 = sleep[1:10, ]
sleep1$group2 = sleep[11:20, 1]
t.test(extra~group2, var.equal=T, paired=T)
t.test(extra~group2, var.equal=T, paired=T, data=sleep1)
t.test(extra~group2, data=sleep1, var.equal=T, paired=T)
t.test(x=sleep1$extra, y=sleep1$group2, data=sleep1, var.equal=T, paired=T)
var.test(extra~group, data = sleep)
t.test(extra~group, var.equal = T, data = sleep) # ???
t.test(extra~group, var.equal = T, data = sleep, paired = T) # ??? # 어떨때는 낮은게 유의하고 어떨때는 높은게 유의함??
t.test(x=sleep1$extra, y=sleep1$group2, data=sleep1, var.equal=T, paired=T)
t.test(x=data1, mu=180)
data1 = rnorm(100, mean=180, sd=10)
t.test(x=data1, mu=180)
library(xlsx)
setwd("/Users/yoon/Documents/DataScience/R_work")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
s1 = read.xlsx("s1.xlsx")
library(xlsx)
s1 = read.xlsx("s1.xlsx")
s1 = read.xlsx("s1.xls")
s1 = read.xlsx("s1.xls", 1)
s1 = read.xlsx("s1.xls", sheetIndex = 1, startRow = 2, header = T)
s1 = read.xlsx("s1.xls", sheetIndex = 2, startRow = 2, header = T)
s1 = read.xlsx("s1.xls", sheetIndex = 1, startRow = 2, header = T)
s1 = read.xlsx("s1.xlsx", sheetIndex = 1, startRow = 2, header = T)
s1 = read.xlsx("s1.xlsx", sheetIndex = 1, startRow = 2, header = T)
s1 = read.xlsx("1.xlsx", sheetIndex = 1, startRow = 2, header = T)
s1 = read.xlsx("g1.xlsx", sheetIndex = 1, startRow = 2, header = T)
setwd("/Users/yoon/Documents/DataScience/R_work")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
library(xlsx)
s1 = read.xlsx("g1.xlsx", sheetIndex = 1, startRow = 2, header = T)
data1 = read.table(pipe("pbpaste"), header = T) # for mac
data1 = read.table(pipe("pbpaste"), header = T, encoding = "UTF-8") # for mac
data1 = read.table(pipe("pbpaste"), header = T, encoding = "UTF-8") # for mac
data1 = read.table(pipe("pbpaste"), header = T, encoding = "UTF-8") # for mac
View(data1)
data1 = read.table(pipe("pbpaste"), header = T, encoding = "UTF-8") # for mac
data1 = read.csv("g1.csv", header = T, encoding = "UTF-8")
data1
View(data1)
data1 = read.csv("g1.csv", header = T, encoding = "UTF-8")
View(data1)
data1 = read.csv("g2.csv", header = T, encoding = "UTF-8")
View(data1)
data1 = read.csv("price.csv", header = T, encoding = "UTF-8")
data1 = read.csv("price.csv", header = T, encoding = "UTF-8")
data1 = read.csv("price.csv", header = T, encoding = "UTF-8")
Sys.setlocale("LC_ALL", "ko_KR.UTF-8") # 한글 인코딩 가능하게 해줌
data1 = read.csv("price.csv", header = T, encoding = "UTF-8")
Sys.setlocale(category = "LC_ALL", locale = "us")
data1 = read.csv("price.csv", header = T, encoding = "UTF-8")
Sys.setlocale(category = "LC_ALL", locale = "us")
Sys.setlocale(category = "LC_ALL", locale = "us")
data1 = read.csv("price.csv", header = T, fileEncoding="euc-kr")
data1
data1 = read.table(pipe("pbpaste"), header = T, encoding = "euc-kr") # for mac
data1 = read.table(pipe("pbpaste"), header = T, fileencoding = "euc-kr") # for mac
data1 = read.table(pipe("pbpaste"), header = T, filencoding = "euc-kr") # for mac
data1 = read.table(pipe("pbpaste"), header = T, fileEncoding = "euc-kr") # for mac
data1 = read.xlsx("23.xlsx", header = T, fileEncoding="UTF-8")
data1 = read.xlsx("23.xlsx", sheetIndex = 1,header = T, fileEncoding="UTF-8")
data1 = read.xlsx("23.xlsx", sheetIndex = 1, startrow = 2, header = T, fileEncoding="UTF-8")
library(readxl)
install.packages("readxl")
library(readxl)
mydata <- read_excel("23.xlsx")
View(mydata)
View(mydata)
View(mydata)
mydata <- read_excel("전국건강증진센터표준데이터.xls")
View(mydata)
View(mydata)
View(data1)
data1 = read.csv("NHIS_OPEN_T60_2015_part1.csv", header = T, fileEncoding="euc-kr")
head(data1)
read.csv(con, nrows=30)
con = file("NHIS_OPEN_T60_2015_part1.csv", "r")
read.csv(con, nrows=30)
con = file("NHIS_OPEN_T60_2015_part1.csv", "r", fileEncoding="euc-kr")
con = file("NHIS_OPEN_T60_2015_part1.csv", "r", encoding="euc-kr")
read.csv(con, nrows=30)
a = read.csv(con, nrows=30)
close(con)
View(a)
