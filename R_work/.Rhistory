print("hello world!")
summary(iris)
summary(iris)
setwd("~/")
getwd()
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
table(iris$Species)
x = table(iris$Species)
x3 = 1:10
class(x)
x4 = c(1,5,3,9)
x4[2]
matrix(1:15, nrow=3)
matrix(1:15, ncol=3)
3row = matrix(1:15, nrow=3)
3col = matrix(1:15, ncol=3)
row_3 = matrix(1:15, nrow=3)
col_3 = matrix(1:15, ncol=3)
x5 = matrix(1:15, ncol=3, byrow=3)
x5
x5 = matrix(1:15, ncol=3, byrow=T)
x5
x5 = matrix(1:15, ncol=3, byrow=F)
x5
row_3 = matrix(1:15, nrow=3)
row_3
x5[-c(2,4)]
mat_byrow[-c(2,4)]
mat_byrow = matrix(1:15, ncol=3, byrow=T)
mat_bycol = matrix(1:15, ncol=3, byrow=F)
mat_byrow[-c(2,4)]
a
a = mat_byrow[-c(2,4)]
a
mat_byrow
a = mat_byrow[-c(2,4),3 ]
a
a = mat_byrow[-c(2,4),3 ] # ???
a
a = mat_byrow[2,3 ] # 2,4 번째 row를 제외하고, 3번째 열의 값을 선택.
a
x1 = c(1,2,3,4,5,4,3,6,7,1000)
sum(x1)/length(x1)
mean(X1)
mean(x1)
median(x1)
replace = T) # 복원추출 샘플링
sample(1:45, 6, replace = T) # 복원추출 샘플링
sample(1:45, 6, replace = T) # 복원추출 샘플링
sample(1:45, 6, replace = T) # 복원추출 샘플링
sample(1:45, 6, replace = T) # 복원추출 샘플링
sample(1:45, 6, replace = T) # 복원추출 샘플링
ind = sample(1:nrow(iris), 150, replace = F)
A1 = iris[ind, ]
View(A1)
1:nrow(iris)
nrow(iris)
ind = sample(1:nrow(iris), nrow(iris)*0.7, replace = F)
ind
A1 = iris[ind, ]
View(A1)
ind = sample(1:nrow(iris), nrow(iris)*0.7, replace = F)
A1 = iris[ind, ]
View(A1)
train = iris[ind, ]
test = iris[-ind, ]
summary(iris)
hist(iris$Petal.Length)
boxplot(iris[, 1:4])
hist(iris$Petal.Length)
boxplot(iris[, 1:4])
hist(iris$Sepal.Width)
boxplot(iris[, 1:4])
View(iris)
sacled_data = scale(iris[, 1:4]) # 5는 label 이므로 안함.
scaled_data = scale(iris[, 1:4]) # 5는 label 이므로 안함.
View(scaled_data)
nlevels(iris$Species)
levels(iris$Species)
library(MASS)
data("survey")
View(survey)
table(survey$Sex, survey$W.Hnd)
table(survey$Sex, survey$Smoke)
View(survey)
prop.table(t1)
t1 = table(survey$Sex, survey$Smoke)
prop.table(t1)
prop.table(t1, 1)
prop.table(t1, 2)
barplot(t1)
x3 = 1:10
x4 = c(1,5,3,9)
class(x3)
class(x4)
plot(iris$Petal.Length, iris$Sepal.Length)
nrow(iris$Sepal.Length)*0.1
nrow(iris$Sepal.Length)*0.1
nrow(iris$Sepal.Length)
(length(iris$Sepal.Length)*0.1)/2
round(length(iris$Sepal.Length)*0.1)/2
round(length(iris$Sepal.Length)*0.1)/2
round((length(iris$Sepal.Length)*0.1)/2)
n = round((length(iris$Sepal.Length)*0.1)/2, 0 )
sort(iris$Sepal.Length)[n:length(iris$Sepal.Length)-n]
sort(iris$Sepal.Length)
trimed = sort(iris$Sepal.Length)[n:length(iris$Sepal.Length)-n]
sort(iris$Sepal.Length)[0]
sort(iris$Sepal.Length)[0:1]
sort(iris$Sepal.Length)[0:2]
trimed = sort(iris$Sepal.Length)[n:length(iris$Sepal.Length)-n]
trimed
trimed = sort(iris$Sepal.Length)[0:length(iris$Sepal.Length)-n]
trimed = sort(iris$Sepal.Length)[1:length(iris$Sepal.Length)-n]
trimed = sort(iris$Sepal.Length)[8:length(iris$Sepal.Length)-n]
trimed
trimed = sort(iris$Sepal.Length)[5:length(iris$Sepal.Length)-n]
sort(iris$Sepal.Length)[1:3]
sort(iris$Sepal.Length)[5:10]
sort(iris$Sepal.Length)[5:31]
sort(iris$Sepal.Length)
trimed = sort(iris$Sepal.Length)[n:length(iris$Sepal.Length)-n]
trimed
trimed = sort(iris$Sepal.Length)[8:length(iris$Sepal.Length)-8]
trimed
trimed = sort(iris$Sepal.Length)[0:length(iris$Sepal.Length)-8]
length(iris$Sepal.Length)
trimed = sort(iris$Sepal.Length)[0:142]
trimed
n = round((length(iris$Sepal.Length)*0.1)/2, 0 )
n
trimed = sort(iris$Sepal.Length)[n:length(iris$Sepal.Length)-n]
trimed
trimed = sort(iris$Sepal.Length)[(n+1):length(iris$Sepal.Length)-n]
trimed
trimed = sort(iris$Sepal.Length)[8:142]
trimed
trimed = sort(iris$Sepal.Length)[8:142]
trimed = sort(iris$Sepal.Length)[(n+1):length(iris$Sepal.Length)-n]
trimed = sort(iris$Sepal.Length)[(n+1):(length(iris$Sepal.Length)-n)]
trimed = sort(iris$Sepal.Length)[(n):(length(iris$Sepal.Length)-n)]
trimed = sort(iris$Sepal.Length)[8:142]
trimed = sort(iris$Sepal.Length)[(n):(length(iris$Sepal.Length)-n)]
rnorm(1000)
rnorm(1000, mean = 100, sd=3)
hist(rnorm(1000, mean = 100, sd=3))
hist(rnorm(1000, mean = 100, sd=3))
hist(rnorm(10000, mean = 100, sd=3))
hist(rnorm(100000, mean = 100, sd=3))
hist(rnorm(100000))
cor(iris[, 1:4])
cor(iris[1:10, 1:4])
cor.test(iris$Sepal.Length, iris$Petal.Length)
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
setwd("C:/Users/ajou/Desktop/DataScience/R_work")
readLines('big.txt')
readLines('big.txt',
encoding = 'UTF-8')
x3 = 1:10
rm(list = ls())
txt = readLines('big.txt',
encoding = 'UTF-8')
rm(txt)
ind = sample(1:nrow(iris), nrow(iris)*0.7, replace = F)
A1 = iris[ind, ]
View(A1)
str(txt)
txt[10]
txt = readLines('big.txt',
encoding = 'UTF-8')
str(txt)
txt[10]
list(sp=1, sp2=c(1,3,5), y=c("A", "B"))
list1 = list(sp=1, sp2=c(1,3,5), y=c("A", "B"))
list1
list1[1q]
list1[1]
list1[2]
list1[3]
list1[3][1]
list1[3][1]
list1[[3]]
list$sp
list$sp2
list1$sp2
list1$sp1
list1$sp
list1[[2]]
list2 = list(x=list1, y=list1)
list2
str(list2)
list[[1]]
list2[[1]]
list2[1]
list2[[[1]]]
list2[[1]]
list2[[1]][0]
list2[[1]][[2]]
list2[[1]]
list2[[1]][2]
nchar(txt)
nchar[(txt)>1]
txt0 = txt[nchar(txt)>1]
txt0
install.packages("KoNLP", dependencies = T) # dependencies : 연관 패키지 모듬 설치
library(KoNLP)
library(rJava)
library(rJava)
library(KoNLP)
library(KoNLP)
useSejongDic()
txt_n = extractNoun(txt0)
str(txt_n)
txt_t = table(unlist(txt_n))
install.packages("wordcloud")
library(wordcloud)
wordcloud(names(txt_t), txt_t)
txt1 = gsub("bigdata", "빅데이터", txt0) # replace
txt0 = gsub('[A-z]', "", txt1) # 대괄호 안에 : A부터 z까지를 없앰.
txt_n = extractNoun(txt0)
str(txt_n)
txt_t = table(unlist(txt_n))
wordcloud(names(txt_t), txt_t)
txt1 = gsub("bigdata", "빅데이터", txt0) # replace
txt1 = gsub('[A-z]', "", txt1) # 대괄호(패턴이라는 의미) 안에 : A부터 z까지를 없앰. 영어 제거
txt1 = gsub('[[:digit:]]', '', txt1) # 숫자 제거
txt1 = gsub('[[:punct:]]', '', txt1) # 그래픽 문자 제거
txt1 = gsub('  ', ' ', txt1) # 긴 공백 제거
# grap() : check
txt_n = extractNoun(txt1)
wordcloud(names(txt_t), txt_t)
txt1 = gsub("bigdata", "빅데이터", txt0) # replace
txt1 = gsub('[A-z]', "", txt1) # 대괄호(패턴이라는 의미) 안에 : A부터 z까지를 없앰. 영어 제거
txt1 = gsub('[[:digit:]]', '', txt1) # 숫자 제거
txt1 = gsub('[[:punct:]]', '', txt1) # 그래픽 문자 제거
txt1 = gsub('  ', ' ', txt1) # 긴 공백 제거
# grap() : check
txt_n = extractNoun(txt1)
#str(txt_n)
txt_t = table(unlist(txt_n))
wordcloud(names(txt_t), txt_t)
