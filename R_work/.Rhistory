g4$`8시` <- as.numeric(g4$`8시`)
g4$`9시` <- as.numeric(g4$`9시`)
g4$`10시` <- as.numeric(g4$`10시`)
g4$`11시` <- as.numeric(g4$`11시`)
g4$`12시` <- as.numeric(g4$`12시`)
g4$`13시` <- as.numeric(g4$`13시`)
g4$`14시` <- as.numeric(g4$`14시`)
g4$`15시` <- as.numeric(g4$`15시`)
g4$`16시` <- as.numeric(g4$`16시`)
g4$`17시` <- as.numeric(g4$`17시`)
g4$`18시` <- as.numeric(g4$`18시`)
g4$`19시` <- as.numeric(g4$`19시`)
g4$`20시` <- as.numeric(g4$`20시`)
g4$`21시` <- as.numeric(g4$`21시`)
g4$`22시` <- as.numeric(g4$`22시`)
View(g4)
g4$q1 = apply(g4[, 2:7], 1, FUN=mean)
g4$q1 = apply(g4[, 8:13], 1, FUN=mean)
g4$q1 = apply(g4[, 14:17], 1, FUN=mean)
g4$q1 = apply(g4[, 2:7], 1, FUN=mean)
g4$q2 = apply(g4[, 8:13], 1, FUN=mean)
g4$q3 = apply(g4[, 14:17], 1, FUN=mean)
View(g4)
var.test(g4$q2, g4$q3)
View(g4)
t.test(x=g4$q2, y=g4$q3, var.equal = T)
t.test(x=g4$q2, y=g4$q3, var.equal = T, paired = T)
as.character(1)
as.character(1) + "2"
b = "2"
a = as.character(1)
paste(a,b)
paste(a,b, "")
paste(a,b, sep = "")
g3 <- read_xlsx("23.xlsx", sheet = 1, col_names = T)
g3 <- g3[-1,]
g4 = g3[1:29, ] # 서청주 빼고 출력
colnames(g4) = c("지점","1시","2시","3시","4시","5시","6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시","23시","24시")
g4 = g4[, 1:17]
g4 = na.omit(g4)
str(g4)
for (i in 1:16){
col_name = paste("`", as.character(i), "시", "`", sep="")
g4$col_name <- as.numeric(g4$col_name)
}
a = `16시`
a = "`16시`"
g4$a
g4$`1시` <- as.numeric(g4$`1시`)
g4$`2시` <- as.numeric(g4$`2시`)
g4$`3시` <- as.numeric(g4$`3시`)
g4$`4시` <- as.numeric(g4$`4시`)
g4$`5시` <- as.numeric(g4$`5시`)
g4$`6시` <- as.numeric(g4$`6시`)
g4$`7시` <- as.numeric(g4$`7시`)
g4$`8시` <- as.numeric(g4$`8시`)
g4$`9시` <- as.numeric(g4$`9시`)
g4$`10시` <- as.numeric(g4$`10시`)
g4$`11시` <- as.numeric(g4$`11시`)
g4$`12시` <- as.numeric(g4$`12시`)
g4$`13시` <- as.numeric(g4$`13시`)
g4$`14시` <- as.numeric(g4$`14시`)
g4$`15시` <- as.numeric(g4$`15시`)
g4$`16시` <- as.numeric(g4$`16시`)
g4$q1 = apply(g4[, 2:7], 1, FUN=mean)
g4$q2 = apply(g4[, 8:13], 1, FUN=mean)
g4$q3 = apply(g4[, 14:17], 1, FUN=mean)
var.test(g4$q2, g4$q3)
t.test(x=g4$q2, y=g4$q3, var.equal = T, paired = T)
var.test(g4$q2, g4$q3)
t.test(x=g4$q2, y=g4$q3, var.equal = T, paired = T)
mean(as.matrix(g4[1, 2:7]))
g4[1, 2:7]
as.matrix(g4[1, 2:7])
mean(g4[1, 2:7])
)
mean(as.matrix(g4[1, 2:7]))
a3 = data.frame(a=1:7, b=11:17, c=letters[1:7])
a3
a3 = data.frame(1:7, 11:17, letters[1:7])
a3
setwd("/Users/yoon/Documents/DataScience/R_work")
library(MASS)
data("survey")
View(survey)
aov()
g3 <- read_xlsx("23.xlsx", sheet = 1, col_names = T)
g3 <- g3[-1,]
g4 = g3[1:29, ] # 서청주 빼고 출력
colnames(g4) = c("지점","1시","2시","3시","4시","5시","6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시","23시","24시")
View(g4)
library(MASS)
data("survey")
View(survey)
model1 = aov(Pulse ~ Exer, data=survey)
summary(model1)
model2 = aov(Sepal.Length ~ Species, data=iris)
summary(model2)
iris
View(survey)
model3 = aov(Pulse ~ Exer+Smoke, data=survey)
summary(mode3)
summary(model3)
model3 = aov(Pulse ~ Exer+Smoke+Exer:Smoke, data=survey)
summary(model3)
model3 = aov(Pulse ~ Exer+Smoke+Exer*Smoke, data=survey)
summary(model3)
model3 = aov(Pulse ~ Exer*Smoke, data=survey)
summary(model3)
View(survey)
t1 = TukeyHSD(model1, "Exer")
t1
View(survey)
summary(model1)
str(survey)
summary(model1)
summary(model2)
View(survey)
model3 = aov(Pulse ~ M.I, data=survey)
summary(model3)
t1 = TukeyHSD(model3, "M.I")
t1 # some-freq 의 경우 집단간의 심박수 차이가 있는 것.
g3 <- read_xlsx("23.xlsx", sheet = 1, col_names = T)
g3 <- g3[-1,]
g4 = g3[1:29, ] # 서청주 빼고 출력
colnames(g4) = c("지점","1시","2시","3시","4시","5시","6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시","23시","24시")
g4 = g4[, 1:17]
g4 = na.omit(g4)
str(g4)
g4$`1시` <- as.numeric(g4$`1시`)
g4$`2시` <- as.numeric(g4$`2시`)
g4$`3시` <- as.numeric(g4$`3시`)
g4$`4시` <- as.numeric(g4$`4시`)
g4$`5시` <- as.numeric(g4$`5시`)
g4$`6시` <- as.numeric(g4$`6시`)
g4$`7시` <- as.numeric(g4$`7시`)
g4$`8시` <- as.numeric(g4$`8시`)
g4$`9시` <- as.numeric(g4$`9시`)
g4$`10시` <- as.numeric(g4$`10시`)
g4$`11시` <- as.numeric(g4$`11시`)
g4$`12시` <- as.numeric(g4$`12시`)
g4$`13시` <- as.numeric(g4$`13시`)
g4$`14시` <- as.numeric(g4$`14시`)
g4$`15시` <- as.numeric(g4$`15시`)
g4$`16시` <- as.numeric(g4$`16시`)
g4$q1 = apply(g4[, 2:7], 1, FUN=mean)
g4$q2 = apply(g4[, 8:13], 1, FUN=mean)
g4$q3 = apply(g4[, 14:17], 1, FUN=mean)
g5=melt(g4, id=1:25)
library(reshape2)
g5=melt(g4, id=1:25)
g5=melt(g4, id=1:17)
g5
View(g4)
View(g5)
View(g5)
View(g4)
model4 = aov(value~variable data=g5)
summary(model4)
model4 = aov(value~variable data=g5)
model4 = aov(value~variable, data=g5)
summary(model4)
g6=melt(g4, id=1:17, id=1)
g6=melt(g4[1:17], id=1)
model5 = aov(value~variable, data=g6)
summary(model5)
model4 = aov(value~variable, data=g5)
summary(model4)
model5 = aov(value~variable, data=g6)
summary(model5)
View(g6)
View(g6)
t14= TukeyHSD(model4, "variable")
t4
t14
t14= TukeyHSD(model5, "variable")
t14
View(g6)
View(g6)
model4 = aov(value~variable, data=g5)
summary(model4)
model1 = aov(Pulse ~ Exer, data=survey)
summary(model1)
model4 = aov(value~variable, data=g5)
summary(model4)
g6=melt(g4[1:17], id=1)
model5 = aov(value~variable, data=g6)
summary(model5)
t14= TukeyHSD(model5, "variable")
t14
t14= TukeyHSD(model5, "variable")
t3 = as.matrix(t14$variable)
rownames(t3[(which(t3[,4]<0.5)),])
g5=melt(g4, id=1:17)
model4 = aov(value~variable, data=g5)
summary(model4)
model4 = aov(value~variable, data=g5)
summary(model4)
g6 = melt(g4[1:17], id=1)
model5 = aov(value~variable, data=g6)
summary(model5)
t14= TukeyHSD(model5, "variable")
t14
g5 = melt(g4, id=1:17)
View(g5)
model4 = aov(value~variable, data=g5)
summary(model4)
a = 5
a2 = "a"
a3 = 1:3
matrix(1:15, nrow=3)
a4 = c("a", 3, "Awd")
a5[2,1]
a5 = matrix(1:15, nrow=3)
a5[2,1]
a5 = matrix(1:15, nrow=3)
a5[2,1]
View(a5)
a5[2,1] = "A"
View(a5)
a5 = matrix(1:15, nrow=3)
a6 = a5[2,1]
str(a6)
str(a5)
a6 = array(dim=c(3,2,3))
a6
str(a6)
a7 = data.frame(1:3, rep(1:3), LETTERS[5:7])
str(a7)
View(a7)
a8 = list(a,a2,a3,a4,a5,a6,a7)
a = 5
a2 = "a"
a3 = 1:3
a4 = c("a", 3, "Awd")
a5 = matrix(1:15, nrow=3)
a6 = array(dim=c(3,2,3))
a7 = data.frame(1:3, rep(1:3), LETTERS[5:7])
a8 = list(a,a2,a3,a4,a5,a6,a7)
a7[2]
a9 = a7[2]
str(a9)
a10 = as.matrix(a7)
str(a10)
View(a10)
which(iris$Sepal.Length>=6.5)
rownames(which(iris$Sepal.Length>=6.5))
rownames(iris[which(iris$Sepal.Length>=6.5)])
rownames(iris[which(iris$Sepal.Length>=6.5), ])
rownames(iris[which(iris$Sepal.Length>=6.5), ])
install.packages('mlbench')
library(mlbench)
data("Vowel")
View(Vowel)
grep('i', Vowel$Class)
v1 = Vowel[idx_list, ]
idx_list = grep('i', Vowel$Class) # return index
v1 = Vowel[idx_list, ]
View(v1)
install.packages("car")
library(car)
levene.test(Sepal.Length ~ Species, iris) # 등분산 검정
leveneTest(Sepal.Length ~ Species, iris) # 등분산 검정
data1 = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
data2 = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
data1 = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
data2 = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
View(data1)
View(data2)
table(data1$track_id)
table(data2$rating)
table(data2$id_android)
idx_list = grep(1, data2$id_android)
idx_list = grep("1", data2$id_android)
idx_list = grep(1, data2$id_android)
table(data1$track_id)
idx_list = grep(1, data2$id_android)
idx_list = grepl(1, data2$id_android)
idx_list = grep(1, data2$id_android)
which(data2$id_android == 1)
length(which(data2$id_android == 1))
idx_list = which(data2$id_android == 1)
data2[idx_list, ]
te = data2[idx_list, ]
View(te)
table(data2$id_android)
idx_list = which(data2$id_android == 10)
te = data2[idx_list, ]
View(te)
data1 = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
data2 = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
colnames(data2) = c("track_id", "id_android", "speed", "time", "distance", "rating", "rating_bus", "rating_weather", "car_or_bus", "linha")
View(data2)
merge(data1, data2, by="track_id")
data3 = merge(data1, data2, by="track_id")
View(data3)
View(data2)
View(data2)
View(te)
idx_list = which(data2$id_android == 10)
te = data2[idx_list, ]
View(te)
idx_list = which(data2$rating == 1)
te = data2[idx_list, ]
View(te)
idx_list = which(data2$rating == 0)
te = data2[idx_list, ]
View(te)
idx_list = which(data2$rating == 1)
te = data2[idx_list, ]
View(te)
idx_list = which(data2$rating_weather == 3)
te = data2[idx_list, ]
View(te)
idx_list = which(data2$rating == 1)
te = data2[idx_list, ]
View(te)
View(data1)
car_idx_list = which(data2$car == 1)
bus_idx_list = which(data2$car == 2)
car = data2[car_idx_list, ]
bus = data2[bus_idx_list, ]
View(car)
table(car$rating)
table(car$rating)
table(bus$rating)
View(data3)
View(data1)
View(data2)
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
colnames(app) = c("track_id", "id_android", "speed", "time", "distance", "rating", "rating_bus", "rating_weather", "car_or_bus", "linha")
table(tracking$track_id)
table(app$id_android) # id_android는 유저id 라고 볼수있음.
car_idx_list = which(app$car == 1)
bus_idx_list = which(app$car == 2)
car = app[car_idx_list, ]
bus = app[bus_idx_list, ]
table(car$rating)
table(bus$rating) # 버스보다 차가 좋음
merged_data = merge(tracking, app, by="track_id")
View(app)
vehicle = aov(rating~car_or_bus, data=app)
vehicle
t = TukeyHSD(vehicle, "car_or_bus")
vehicle = aov(rating~car_or_bus, data=app)
t = TukeyHSD(vehicle, "car_or_bus")
app$car_or_bus = as.factor(app$car_or_bus)
vehicle = aov(rating~car_or_bus, data=app)
t = TukeyHSD(vehicle, "car_or_bus")
t
vehicle
vehicle = aov(rating~car_or_bus, data=app)
t = TukeyHSD(vehicle, "car_or_bus")
t
time = aov(rating~time, data=app)
time
tt = TukeyHSD(time, "time")
tt
time
tt = TukeyHSD(time, "time")
vehicle = aov(rating~car_or_bus, data=app)
vehicle
app$linha = as.factor(app$linha)
destiny = aov(rating~linha, data=app)
destiny
tt = TukeyHSD(destiny, "linha")
tt
app$car_or_bus = as.factor(app$car_or_bus)
vehicle = aov(rating~car_or_bus, data=app)
vehicle
t = TukeyHSD(vehicle, "car_or_bus")
t
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
colnames(app) = c("track_id", "id_android", "speed", "time", "distance", "rating", "rating_bus", "rating_weather", "car_or_bus", "linha")
vehicle = aov(time~rating*rating_bus, data=app)
vehicle
t = TukeyHSD(vehicle, "rating")
vehicle = aov(time~rating*rating_bus, data=app)
t = TukeyHSD(vehicle, "rating")
t = TukeyHSD(vehicle, c("rating", "rating_bus"))
vehicle = aov(time~rating*rating_bus, data=app)
t = TukeyHSD(vehicle, c("rating", "rating_bus"))
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
vehicle = aov(time~rating*rating_bus, data=app)
t = TukeyHSD(vehicle, c("rating", "rating_bus"))
app$rating = as.factor(app$rating)
app$rating_bus = as.factor(app$rating_bus)
vehicle = aov(time~rating*rating_bus, data=app)
t = TukeyHSD(vehicle, c("rating", "rating_bus"))
t
vehicle
t
t = TukeyHSD(vehicle)
vehicle
t
View(app)
mm1 = aov(time~rating, car1)
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
w1 = app[app$rating_weather==1, ]
w2 = app[app$rating_weather==2, ]
mm1 = aov(time~rating, car1)
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
mm1
mm2
summary(mm1)
summary(mm2)
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
car_idx_list = which(app$car == 1)
bus_idx_list = which(app$car == 2)
car1 = app[car_idx_list, ]
bus1 = app[bus_idx_list, ]
table(car1$rating)
table(bus1$rating)
app$car_or_bus = as.factor(app$car_or_bus)
vehicle = aov(rating~car_or_bus, data=app)
summary(vehicle)
t = TukeyHSD(vehicle, "car_or_bus")
t
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
w1 = app[app$rating_weather==1, ]
w2 = app[app$rating_weather==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
mm2 = aov(time~rating, bus1)
summary(mm2)
bus1
View(bus1)
mm2 = aov(time~rating, bus1)
summary(mm2)
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
car_idx_list = which(app$car == 1)
bus_idx_list = which(app$car == 2)
car1 = app[car_idx_list, ]
bus1 = app[bus_idx_list, ]
app$car_or_bus = as.factor(app$car_or_bus)
vehicle = aov(rating~car_or_bus, data=app)
summary(vehicle)
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
tracking = read.csv("go_track_trackspoints.csv", header = T, fileEncoding="UTF-8")
app = read.csv("go_track_tracks.csv", header = T, fileEncoding="UTF-8")
app2 = app[app$rating_weather != 0, ]
factor(app2$rating_weather)
as.factor(app2$rating_weather)
var.test(app2[app2$rating_weather == 1, ], app2[app2$rating_weather == 2, ])
app2[app2$rating_weather == 1, ]
var.test(app2[app2$rating_weather == 1, "rating"], app2[app2$rating_weather == 2, "rating"])
var.test(rating~rating_weather, app2)
t.test(rating~rating_weather, app2, var.equal=T)
t.test(rating~rating_weather, app2, var.equal = T, paired = F)
View(app2)
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
app$rating = as.factor(app$rating)
car1 = app[app$car_or_bus==1, ]
bus1 = app[app$car_or_bus==2, ]
mm1 = aov(time~rating, car1)
mm2 = aov(time~rating, bus1)
summary(mm1)
summary(mm2)
setwd("/Users/yoon/Documents/DataScience/R_work")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
cars
plot(cars)
lm(dist~speed, car)
lm(dist~speed, cars)
summary(model1)
model1 = lm(dist~speed, cars)
summary(model1)
View(model1)
summary(model1)
setwd("/Users/yoon/Documents/DataScience/R_work")
write(model1$fitted.values, file='eff1.txt')
write(model1$coefficients, file='eff1.txt')
abline(model1)
abline(model1, col='red')
predict(model1, 13)
predict(model1, x=13)
predict(model1, newdata=data.frame(speed=c(10,15)))
